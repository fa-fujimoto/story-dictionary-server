require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/character_directories", type: :request do
  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # dictionariesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  let(:user) { create(:user) }
  let(:parent_project) { create(:project, character_directory: directory, is_published: project_published, author: author) }
  let(:directory) { create(:character_directory, is_published: directory_published) }
  let(:project_published) { is_published }
  let(:directory_published) { is_published }
  let(:is_published) { true }

  describe 'login時' do
    before do
      login user
    end

    describe "GET /show" do
      describe '自分のプロジェクト' do
        let(:author) { user }

        context '全てが公開中の場合' do
          example '正しく表示されること' do
            auth_params = get_auth_params_from_login_response_headers(response)
            get project_character_directory_url(parent_project), headers: auth_params, as: :json
            expect(response).to be_successful
          end
        end

        context 'projectが非公開の場合' do
          let(:project_published) { false }

          example '正しく表示されること' do
            auth_params = get_auth_params_from_login_response_headers(response)
            get project_character_directory_url(parent_project), headers: auth_params, as: :json
            expect(response).to be_successful
          end
        end

        context 'directoryが非公開の場合' do
          let(:directory_published) { false }

          example '正しく表示されること' do
            auth_params = get_auth_params_from_login_response_headers(response)
            get project_character_directory_url(parent_project), headers: auth_params, as: :json
            expect(response).to be_successful
          end
        end
      end

      describe '他人のプロジェクト' do
        let(:author) { create(:user, name: 'other_user') }

        context '全てが公開中の場合' do
          example '正しく表示されること' do
            auth_params = get_auth_params_from_login_response_headers(response)
            get project_character_directory_url(parent_project), headers: auth_params, as: :json
            expect(response).to be_successful
          end
        end

        context 'projectが非公開の場合' do
          let(:project_published) { false }

          example '権限エラーになること' do
            auth_params = get_auth_params_from_login_response_headers(response)
            get project_character_directory_url(parent_project), headers: auth_params, as: :json
            expect(response.status).to eq 403
          end
        end

        context 'directoryが非公開の場合' do
          let(:directory_published) { false }

          example '権限エラーになること' do
            auth_params = get_auth_params_from_login_response_headers(response)
            get project_character_directory_url(parent_project), headers: auth_params, as: :json
            expect(response.status).to eq 403
          end
        end
      end
    end

    describe "PATCH /update" do
      describe '自分のプロジェクト' do
        let(:author) { user }

        context '全てが公開中の場合' do
          context "with valid parameters" do
            let(:new_attributes) { {is_editable: true} }

            it "updates the requested directory" do
              auth_params = get_auth_params_from_login_response_headers(response)

              patch project_character_directory_url(parent_project),
                    params: { character_directory: new_attributes }, headers: auth_params, as: :json
              directory.reload

              expect(directory.is_editable).to eq true
            end

            it "renders a json response with the directory" do
              auth_params = get_auth_params_from_login_response_headers(response)

              patch project_character_directory_url(parent_project),
                    params: { character_directory: new_attributes }, headers: auth_params, as: :json

              expect(response).to have_http_status(:ok)
              expect(response.content_type).to include("application/json")
            end
          end

          context "with invalid parameters" do
            it "renders a json response with errors for the directory" do
              auth_params = get_auth_params_from_login_response_headers(response)

              patch project_character_directory_url(parent_project),
                    params: { character_directory: { is_editable: nil } }, headers: auth_params, as: :json

              expect(response).to have_http_status(:unprocessable_entity)
              expect(response.content_type).to include("application/json")
            end
          end
        end

        context 'projectが非公開の場合' do
          let(:project_published) { false }

          context "with valid parameters" do
            let(:new_attributes) { {is_editable: true} }

            it "updates the requested directory" do
              auth_params = get_auth_params_from_login_response_headers(response)

              patch project_character_directory_url(parent_project),
                    params: { character_directory: new_attributes }, headers: auth_params, as: :json
              directory.reload

              expect(directory.is_editable).to eq true
            end

            it "renders a json response with the directory" do
              auth_params = get_auth_params_from_login_response_headers(response)

              patch project_character_directory_url(parent_project),
                    params: { character_directory: new_attributes }, headers: auth_params, as: :json

              expect(response).to have_http_status(:ok)
              expect(response.content_type).to include("application/json")
            end
          end
        end

        context 'directoryが非公開の場合' do
          let(:directory_published) { false }

          context "with valid parameters" do
            let(:new_attributes) { {is_editable: true} }

            it "updates the requested directory" do
              auth_params = get_auth_params_from_login_response_headers(response)

              patch project_character_directory_url(parent_project),
                    params: { character_directory: new_attributes }, headers: auth_params, as: :json
              directory.reload

              expect(directory.is_editable).to eq true
            end

            it "renders a json response with the directory" do
              auth_params = get_auth_params_from_login_response_headers(response)

              patch project_character_directory_url(parent_project),
                    params: { character_directory: new_attributes }, headers: auth_params, as: :json

              expect(response).to have_http_status(:ok)
              expect(response.content_type).to include("application/json")
            end
          end
        end

      end

      describe '他人のプロジェクト' do
        let(:author) { create(:user, name: 'other_user') }

        context '全てが公開中の場合' do
          context "with valid parameters" do
            let(:new_attributes) { {is_editable: true} }

            it "renders a 403 error with the directory" do
              auth_params = get_auth_params_from_login_response_headers(response)

              patch project_character_directory_url(parent_project),
                    params: { character_directory: new_attributes }, headers: auth_params, as: :json

              expect(response.status).to eq 403
            end
          end
        end

        context 'projectが非公開の場合' do
          let(:project_published) { false }

          context "with valid parameters" do
            let(:new_attributes) { {is_editable: true} }

            it "renders a 403 error with the directory" do
              auth_params = get_auth_params_from_login_response_headers(response)

              patch project_character_directory_url(parent_project),
                    params: { character_directory: new_attributes }, headers: auth_params, as: :json

              expect(response.status).to eq 403
            end
          end
        end

        context 'directoryが非公開の場合' do
          let(:directory_published) { false }

          context "with valid parameters" do
            let(:new_attributes) { {is_editable: true} }

            it "renders a 403 error with the directory" do
              auth_params = get_auth_params_from_login_response_headers(response)

              patch project_character_directory_url(parent_project),
                    params: { character_directory: new_attributes }, headers: auth_params, as: :json

              expect(response.status).to eq 403
            end
          end
        end

      end

    end
  end

  describe '非login時' do
    describe "GET /show" do
      describe '他人のプロジェクト' do
        let(:author) { create(:user, name: 'other_user') }

        context '全てが公開中の場合' do
          example '正しく表示されること' do
            get project_character_directory_url(parent_project), as: :json
            expect(response).to be_successful
          end
        end

        context 'projectが非公開の場合' do
          let(:project_published) { false }

          example '権限エラーになること' do
            get project_character_directory_url(parent_project), as: :json
            expect(response.status).to eq 403
          end
        end

        context 'directoryが非公開の場合' do
          let(:directory_published) { false }

          example '権限エラーになること' do
            get project_character_directory_url(parent_project), as: :json
            expect(response.status).to eq 403
          end
        end
      end
    end

    describe "PATCH /update" do
      describe '他人のプロジェクト' do
        let(:author) { create(:user, name: 'other_user') }

        context '全てが公開中の場合' do
          context "with valid parameters" do
            let(:new_attributes) { {is_editable: true} }

            it "renders a 403 error with the directory" do
              patch project_character_directory_url(parent_project),
                    params: { character_directory: new_attributes }, as: :json

              expect(response.status).to eq 403
            end
          end
        end

        context 'projectが非公開の場合' do
          let(:project_published) { false }

          context "with valid parameters" do
            let(:new_attributes) { {is_editable: true} }

            it "renders a 403 error with the directory" do
              patch project_character_directory_url(parent_project),
                    params: { character_directory: new_attributes }, as: :json

              expect(response.status).to eq 403
            end
          end
        end

        context 'directoryが非公開の場合' do
          let(:directory_published) { false }

          context "with valid parameters" do
            let(:new_attributes) { {is_editable: true} }

            it "renders a 403 error with the directory" do
              patch project_character_directory_url(parent_project),
                    params: { character_directory: new_attributes }, as: :json

              expect(response.status).to eq 403
            end
          end
        end

      end
    end
  end
end

