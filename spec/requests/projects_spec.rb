require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/projects", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Project. As you add validations to Project, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:project)
  }

  let(:invalid_attributes) {
    attributes_for(:project, term_id: 'ターム')
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ProjectsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  let(:user) { create(:user) }
  let(:project) { create(:project, dictionary: dictionary, is_published: is_published, author: author) }
  let(:dictionary) { create(:dictionary) }
  let(:is_published) { true }

  describe 'login時' do
    before do
      login user
    end

    describe "GET /index" do
      describe '自分のプロジェクト' do
        let(:author) { user }

        context '全てが公開中の場合' do
          let(:is_published) { true }

          example '正しく表示されること' do
            create(:project, is_published: is_published, author: author)

            auth_params = get_auth_params_from_login_response_headers(response)
            get projects_url, headers: auth_params, as: :json

            expect(response).to be_successful
          end

          example '一覧に公開のプロジェクトが表示されること' do
            create(:project, is_published: is_published, author: author)

            auth_params = get_auth_params_from_login_response_headers(response)
            get user_projects_url(user), headers: auth_params, as: :json

            data = JSON.parse(response.body)

            expect(data.length).to eq 1
          end
        end

        context 'projectが非公開の場合' do
          let(:is_published) { false }

          example '正しく表示されること' do
            create(:project, is_published: is_published, author: author)

            auth_params = get_auth_params_from_login_response_headers(response)
            get projects_url, headers: auth_params, as: :json

            expect(response).to be_successful
          end
        end
      end

      describe '他人のプロジェクト' do
        let(:author) { create(:user, name: 'other_user') }

        context '全てが公開中の場合' do
          let(:is_published) { true }

          example '正しく表示されること' do
            create(:project, is_published: is_published, author: author)

            auth_params = get_auth_params_from_login_response_headers(response)
            get projects_url, headers: auth_params, as: :json

            expect(response).to be_successful
          end

          example '一覧に公開のプロジェクトが表示されること' do
            create(:project, is_published: is_published, author: author)

            auth_params = get_auth_params_from_login_response_headers(response)
            get projects_url(user), headers: auth_params, as: :json

            data = JSON.parse(response.body)

            expect(data.length).to eq 1
          end
        end

        context 'projectが非公開の場合' do
          let(:is_published) { false }

          example '正しく表示されること' do
            create(:project, is_published: is_published, author: author)

            auth_params = get_auth_params_from_login_response_headers(response)
            get projects_url, headers: auth_params, as: :json

            expect(response).to be_successful
          end

          example '一覧に非公開のプロジェクトが表示されないこと' do
            create(:project, is_published: is_published, author: author)

            auth_params = get_auth_params_from_login_response_headers(response)
            get projects_url, headers: auth_params, as: :json

            data = JSON.parse(response.body)

            expect(data.length).to eq 0
          end
        end
      end

      describe 'user配下' do
        describe '自分のプロジェクト' do
          let(:author) { user }

          context '全てが公開中の場合' do
            let(:is_published) { true }

            example '正しく表示されること' do
              create(:project, is_published: is_published, author: author)

              auth_params = get_auth_params_from_login_response_headers(response)
              get user_projects_url(author), headers: auth_params, as: :json

              expect(response).to be_successful
            end

            example '一覧に公開のプロジェクトが表示されること' do
              create(:project, is_published: is_published, author: author)

              auth_params = get_auth_params_from_login_response_headers(response)
              get user_projects_url(author), headers: auth_params, as: :json

              data = JSON.parse(response.body)

              expect(data.length).to eq 1
            end

            example '他のuserのプロジェクトは表示されないこと' do
              create(:project, is_published: is_published, author: create(:user, name: 'other_user'))

              auth_params = get_auth_params_from_login_response_headers(response)
              get user_projects_url(author), headers: auth_params, as: :json

              data = JSON.parse(response.body)

              expect(data.length).to eq 0
            end
          end

          context 'projectが非公開の場合' do
            let(:is_published) { false }

            example '正しく表示されること' do
              create(:project, is_published: is_published, author: author)

              auth_params = get_auth_params_from_login_response_headers(response)
              get user_projects_url(author), headers: auth_params, as: :json

              expect(response).to be_successful
            end

            example '一覧に非公開のプロジェクトが表示されること' do
              create(:project, is_published: is_published, author: author)

              auth_params = get_auth_params_from_login_response_headers(response)
              get user_projects_url(author), headers: auth_params, as: :json

              data = JSON.parse(response.body)

              expect(data.length).to eq 1
            end
          end
        end

        describe '他人のプロジェクト' do
          let(:author) { create(:user, name: 'other_user') }

          context '全てが公開中の場合' do
            let(:is_published) { true }

            example '正しく表示されること' do
              create(:project, is_published: is_published, author: author)

              auth_params = get_auth_params_from_login_response_headers(response)
              get user_projects_url(author), headers: auth_params, as: :json

              expect(response).to be_successful
            end


            example '一覧に公開のプロジェクトが表示されること' do
              create(:project, is_published: is_published, author: author)

              auth_params = get_auth_params_from_login_response_headers(response)
              get user_projects_url(author), headers: auth_params, as: :json

              data = JSON.parse(response.body)

              expect(data.length).to eq 1
            end
          end

          context 'projectが非公開の場合' do
            let(:is_published) { false }

            example '正しく表示されること' do
              create(:project, is_published: is_published, author: author)

              auth_params = get_auth_params_from_login_response_headers(response)
              get user_projects_url(author), headers: auth_params, as: :json

              expect(response).to be_successful
            end

            example '一覧に非公開のプロジェクトが表示されないこと' do
              create(:project, is_published: is_published, author: author)

              auth_params = get_auth_params_from_login_response_headers(response)
              get user_projects_url(author), headers: auth_params, as: :json

              data = JSON.parse(response.body)

              expect(data.length).to eq 0
            end
          end
        end
      end
    end

    describe "GET /show" do
      describe '自分のプロジェクト' do
        let(:author) { user }

        context '全てが公開中の場合' do
          let(:is_published) { true }

          example '正しく表示されること' do
            auth_params = get_auth_params_from_login_response_headers(response)
            get project_url(project), headers: auth_params, as: :json

            expect(response).to be_successful
          end
        end

        context 'projectが非公開の場合' do
          let(:is_published) { false }

          example '正しく表示されること' do
            auth_params = get_auth_params_from_login_response_headers(response)
            get project_url(project), headers: auth_params, as: :json

            expect(response).to be_successful
          end
        end
      end

      describe '他人のプロジェクト' do
        let(:author) { create(:user, name: 'other_user') }

        context '全てが公開中の場合' do
          let(:is_published) { true }

          example '正しく表示されること' do
            auth_params = get_auth_params_from_login_response_headers(response)
            get project_url(project), headers: auth_params, as: :json

            expect(response).to be_successful
          end
        end

        context 'projectが非公開の場合' do
          let(:is_published) { false }

          example '権限エラーになること' do
            auth_params = get_auth_params_from_login_response_headers(response)
            get project_url(project), headers: auth_params, as: :json

            expect(response.status).to eq 403
          end
        end
      end
    end
  end

  describe '非login時' do
    describe "GET /index" do
      describe '他人のプロジェクト' do
        let(:author) { create(:user, name: 'other_user') }

        context '全てが公開中の場合' do
          let(:is_published) { true }

          example '正しく表示されること' do
            create(:project, is_published: is_published, author: author)

            get projects_url, as: :json

            expect(response).to be_successful
          end
        end

        context 'projectが非公開の場合' do
          let(:is_published) { false }

          example '正しく表示されること' do
            create(:project, is_published: is_published, author: author)

            get projects_url, as: :json

            expect(response).to be_successful
          end

          example '一覧に非公開のプロジェクトが表示されないこと' do
            create(:project, is_published: is_published, author: author)

            get user_projects_url(author), as: :json

            data = JSON.parse(response.body)

            expect(data.length).to eq 0
          end
        end
      end
    end

    describe "GET /show" do
      describe '他人のプロジェクト' do
        let(:author) { create(:user, name: 'other_user') }

        context '全てが公開中の場合' do
          let(:is_published) { true }

          example '正しく表示されること' do
            get project_url(project), as: :json

            expect(response).to be_successful
          end
        end

        context 'projectが非公開の場合' do
          let(:is_published) { false }

          example '権限エラーになること' do
            get project_url(project), as: :json

            expect(response.status).to eq 403
          end
        end
      end
    end
  end
end
