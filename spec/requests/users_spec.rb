require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/users", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Word. As you add validations to Word, be sure to
  # adjust the attributes here as well.
  # let(:valid_model) {
  #   FactoryBot.create(:word)
  # }

  # let(:invalid_model) {
  #   FactoryBot.create(:word, name: 'a' * 141)
  # }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # WordsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      # FactoryBot.create(:word)
      create(:user)
      get users_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    describe 'logined' do
      let(:my_account) { create(:user) }
      let!(:published_project) { create(:project, author: user, is_published: :published) }
      let!(:protect_project) { create(:project, author: user, is_published: :protect) }

      before do
        login my_account

        auth_params = get_auth_params_from_login_response_headers(response)
        get user_url(user), headers: auth_params, as: :json
      end

      describe 'request to my page' do
        let(:user) { my_account }

        it "renders a successful response" do
          expect(response).to be_successful
        end
      end

      describe 'request to other user page' do
        let(:user) { create(:user) }

        it "renders a successful response" do
          expect(response).to be_successful
        end

        describe 'include projects' do
          subject { JSON.parse(response.body)['projects'].pluck('term_id') }

          it { is_expected.to include published_project.term_id }
          it { is_expected.not_to include protect_project.term_id }
        end
      end
    end

    describe 'not login' do
      let!(:published_project) { create(:project, author: user, is_published: :published) }
      let!(:protect_project) { create(:project, author: user, is_published: :protect) }

      before do
        get user_url(user), as: :json
      end

      describe 'request to other user page' do
        let(:user) { create(:user) }

        it "renders a successful response" do
          expect(response).to be_successful
        end

        describe 'include projects' do
          subject { JSON.parse(response.body)['projects'].pluck('term_id') }

          it { is_expected.to include published_project.term_id }
          it { is_expected.not_to include protect_project.term_id }
        end
      end
    end
  end
end
